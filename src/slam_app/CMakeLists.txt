
# Set required variables.
SET(SLAM_P_P_BINARY_NAME "slam_plus_plus")

FILE(GLOB_RECURSE SLAM_P_P_BINARY_HEADERS ${SLAM_P_P_SOURCE_DIR}/include/slam_app/*.h)

IF(SLAM_P_P_SHORT_CXSPARSE)
	ADD_DEFINITIONS(-D__CXSPARSE_SHORT)
ENDIF(SLAM_P_P_SHORT_CXSPARSE)

IF(SLAM_P_P_SHORT_CHOLMOD)
	ADD_DEFINITIONS(-D__CHOLMOD_SHORT)
ENDIF(SLAM_P_P_SHORT_CHOLMOD)

IF(SLAM_P_P_FLAT_SYSTEM_ALIGNED_MEMORY)
	ADD_DEFINITIONS(-D__FLAT_SYSTEM_ALIGNED_MEMORY)
ENDIF(SLAM_P_P_FLAT_SYSTEM_ALIGNED_MEMORY)

IF(SLAM_P_P_MAIN_APP_USE_CONST_VERTICES)
	ADD_DEFINITIONS(-D__SLAM_APP_USE_CONSTANT_VERTICES)
ENDIF(SLAM_P_P_MAIN_APP_USE_CONST_VERTICES)

IF(SLAM_P_P_MAIN_APP_UNIT_TESTS)
	ADD_DEFINITIONS(-D__SLAM_APP_ENABLE_UNIT_TESTS)
ENDIF(SLAM_P_P_MAIN_APP_UNIT_TESTS)

IF(SLAM_P_P_MAIN_APP_PERF_TESTS)
	ADD_DEFINITIONS(-D__SLAM_APP_ENABLE_PERF_TESTS)
ENDIF(SLAM_P_P_MAIN_APP_PERF_TESTS)

# support for GPU BLAS
IF(SLAM_P_P_GPU_BLAS)
	ADD_DEFINITIONS(
		-DGPU_BLAS
		-D__CHANNEL_DESCRIPTOR_H__
		-D__CUDA_RUNTIME_H__)
ENDIF(SLAM_P_P_GPU_BLAS)

ADD_DEFINITIONS(-DCERES_NO_PROTOCOL_BUFFERS)

SET(SLAM_P_P_BINARY_SOURCES
#  ${PROJECT_SOURCE_DIR}/external/Ceres/internal/ceres/block_sparse_matrix.cc
#  ${PROJECT_SOURCE_DIR}/external/Ceres/internal/ceres/block_structure.cc
#  ${PROJECT_SOURCE_DIR}/external/Ceres/internal/ceres/sparse_matrix.cc
#  ${PROJECT_SOURCE_DIR}/external/Ceres/internal/ceres/triplet_sparse_matrix.cc
#  ${PROJECT_SOURCE_DIR}/external/Ceres/internal/ceres/linear_operator.cc
#  ${PROJECT_SOURCE_DIR}/external/Ceres/internal/ceres/miniglog/glog/logging.cc
  BlockBench.cpp
  BlockBenchImpl0.cpp
  BlockBenchImpl1.cpp
  BlockUnit.cpp
#  Covado.cpp
#  "../../external/bug reports/Eigen_InvBug.cpp"
  Main.cpp
  Solve2DImpl.cpp
  Solve2DPoseOnlyImpl.cpp
  Solve3DImpl.cpp
  Solve3DPoseOnlyImpl.cpp
  SolveBAImpl.cpp
  SolveROCVImpl.cpp
  SolveSpheronImpl.cpp
  SolveBAStereoImpl.cpp
  SolveBAIntrinsicsImpl.cpp)

IF(SLAM_P_P_LINEAR_SOLVER_TYPE)
	ADD_DEFINITIONS("-D__LINEAR_SOLVER_OVERRIDE=${SLAM_P_P_LINEAR_SOLVER_TYPE}")
ENDIF(SLAM_P_P_LINEAR_SOLVER_TYPE)

# Build and install SLAM_plus_plus executable.
ADD_EXECUTABLE(${SLAM_P_P_BINARY_NAME}
	${SLAM_P_P_BINARY_SOURCES}
	${SLAM_P_P_BINARY_HEADERS})

TARGET_LINK_LIBRARIES(${SLAM_P_P_BINARY_NAME}
	${SLAM_P_P_LIBRARIES})

INSTALL(TARGETS ${SLAM_P_P_BINARY_NAME}
	RUNTIME DESTINATION bin)
